apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: tempo
  namespace: tempo
spec:
  interval: 5m
  chart:
    spec:
      chart: tempo-distributed
      version: 1.15.2
      sourceRef:
        kind: HelmRepository
        name: grafana
        namespace: tempo
  values:
    # ✅ Verwende die richtige Helm-Chart-Struktur
    
    # Global Config
    global:
      clusterDomain: cluster.local
    
    # Tempo Config
    tempo:
      # Memberlist Config
      memberlist:
        join_members:
          - tempo-gossip-ring.tempo.svc.cluster.local:7946
      
      # Storage Config
      storage:
        trace:
          backend: s3
          s3:
            bucket: k3s-tempo
            endpoint: minio.minio.svc.cluster.local:9000
            region: eu-west-1
            access_key: ${MINIO_ACCESS_KEY_ID}
            secret_key: ${MINIO_SECRET_ACCESS_KEY}
            insecure: true
            path_style: true
      
      # Ingester Config
      ingester:
        lifecycler:
          ring:
            kvstore:
              store: memberlist
            replication_factor: 3
            heartbeat_period: 5s
            heartbeat_timeout: 1m
            num_tokens: 128
      
      # Distributor Config
      distributor:
        ring:
          kvstore:
            store: memberlist
          heartbeat_period: 5s
          heartbeat_timeout: 1m
      
      # Compactor Config
      compactor:
        ring:
          kvstore:
            store: memberlist
          heartbeat_period: 5s
          heartbeat_timeout: 1m
      
      # Querier Config
      querier:
        frontend_address: tempo-query-frontend.tempo.svc.cluster.local:9095
        max_concurrent_queries: 20

    # ✅ Traces aktivieren
    traces:
      otlp:
        grpc:
          enabled: true
        http:
          enabled: true
      zipkin:
        enabled: true
      jaeger:
        thriftCompact:
          enabled: true
        thriftHttp:
          enabled: true
      opencensus:
        enabled: true

    # ✅ Gossip Ring Service
    gossipRing:
      enabled: true

    # ✅ Komponenten-Konfiguration
    distributor:
      replicas: 3
      extraArgs:
        - '-config.expand-env=true'
      extraEnv:
        - name: MINIO_ACCESS_KEY_ID
          valueFrom:
            secretKeyRef:
              name: tempo-minio-secret
              key: MINIO_ACCESS_KEY_ID
        - name: MINIO_SECRET_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              name: tempo-minio-secret
              key: MINIO_SECRET_ACCESS_KEY
      nodeSelector:
        kubernetes.io/arch: arm64
      # ✅ Anti-Affinity für bessere Verteilung
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/component: distributor
                topologyKey: kubernetes.io/hostname

    ingester:
      replicas: 3
      extraArgs:
        - '-config.expand-env=true'
      extraEnv:
        - name: MINIO_ACCESS_KEY_ID
          valueFrom:
            secretKeyRef:
              name: tempo-minio-secret
              key: MINIO_ACCESS_KEY_ID
        - name: MINIO_SECRET_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              name: tempo-minio-secret
              key: MINIO_SECRET_ACCESS_KEY
      nodeSelector:
        kubernetes.io/arch: arm64
      # ✅ Anti-Affinity für bessere Verteilung
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/component: ingester
                topologyKey: kubernetes.io/hostname

    compactor:
      replicas: 1
      extraArgs:
        - '-config.expand-env=true'
      extraEnv:
        - name: MINIO_ACCESS_KEY_ID
          valueFrom:
            secretKeyRef:
              name: tempo-minio-secret
              key: MINIO_ACCESS_KEY_ID
        - name: MINIO_SECRET_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              name: tempo-minio-secret
              key: MINIO_SECRET_ACCESS_KEY
      nodeSelector:
        kubernetes.io/arch: arm64

    querier:
      replicas: 3
      extraArgs:
        - '-config.expand-env=true'
      extraEnv:
        - name: MINIO_ACCESS_KEY_ID
          valueFrom:
            secretKeyRef:
              name: tempo-minio-secret
              key: MINIO_ACCESS_KEY_ID
        - name: MINIO_SECRET_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              name: tempo-minio-secret
              key: MINIO_SECRET_ACCESS_KEY
      nodeSelector:
        kubernetes.io/arch: arm64
      # ✅ Anti-Affinity für bessere Verteilung
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/component: querier
                topologyKey: kubernetes.io/hostname

    queryFrontend:
      replicas: 2
      extraArgs:
        - '-config.expand-env=true'
      extraEnv:
        - name: MINIO_ACCESS_KEY_ID
          valueFrom:
            secretKeyRef:
              name: tempo-minio-secret
              key: MINIO_ACCESS_KEY_ID
        - name: MINIO_SECRET_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              name: tempo-minio-secret
              key: MINIO_SECRET_ACCESS_KEY
      nodeSelector:
        kubernetes.io/arch: arm64

    # ✅ Memcached für Query-Performance
    memcached:
      enabled: true
      nodeSelector:
        kubernetes.io/arch: arm64

    # ✅ Minio deaktivieren
    minio:
      enabled: false

    # ✅ ServiceMonitor für Prometheus
    serviceMonitor:
      enabled: true
      labels:
        release: prometheus