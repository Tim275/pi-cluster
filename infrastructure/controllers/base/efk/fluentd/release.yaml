apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: fluentd
  namespace: logging
spec:
  interval: 15m
  chart:
    spec:
      chart: fluentd
      version: "0.3.9"
      sourceRef:
        kind: HelmRepository
        name: fluent
        namespace: logging
  install:
    remediation:
      retries: 3
  values:
    kind: DaemonSet

    # Disable Pod Security Policy
    rbac:
      create: true
      pspEnabled: false

    podSecurityPolicy:
      enabled: false

    # Skip health probes for better stability
    livenessProbe: null
    readinessProbe: null

    # Add an explicit nameOverride
    nameOverride: fluentd-logging

    # Increase resources for stability
    resources:
      requests:
        cpu: 100m
        memory: 300Mi
      limits:
        cpu: 300m
        memory: 600Mi

    # Permission to access logs
    securityContext:
      privileged: true
      runAsUser: 0

    # Run on all nodes
    tolerations:
      - key: node-role.kubernetes.io/master
        operator: Exists
        effect: NoSchedule
      - key: node-role.kubernetes.io/control-plane
        operator: Exists
        effect: NoSchedule

    # Access container logs
    extraVolumes:
      - name: varlog
        hostPath:
          path: /var/log
      - name: varlibdockercontainers
        hostPath:
          path: /var/lib/docker/containers

    extraVolumeMounts:
      - name: varlog
        mountPath: /var/log
      - name: varlibdockercontainers
        mountPath: /var/lib/docker/containers
        readOnly: true

    # Required plugins
    plugins:
      - fluent-plugin-rewrite-tag-filter
      - fluent-plugin-kubernetes_metadata_filter

    # Simple, reliable Fluentd config
    configMapConfigs:
      fluent.conf: |-
        <system>
          log_level error
          suppress_repeated_stacktrace true
          ignore_repeated_log_interval 60
        </system>

        # Container logs source - simplified parser
        <source>
          @type tail
          path /var/log/containers/*.log
          exclude_path ["/var/log/containers/fluentd-*.log", "/var/log/containers/*logging*.log"]
          pos_file /var/log/fluentd-containers.log.pos
          tag raw.kubernetes.*
          read_from_head true
          <parse>
            @type json
            time_key time
            keep_time_key true
          </parse>
        </source>

        # Prevent processing Fluentd's own logs
        <match raw.kubernetes.fluentd**>
          @type null
        </match>

        # Add Kubernetes metadata
        <filter raw.kubernetes.**>
          @type kubernetes_metadata
          kubernetes_url https://#{ENV['KUBERNETES_SERVICE_HOST']}:#{ENV['KUBERNETES_SERVICE_PORT']}
          bearer_token_file /var/run/secrets/kubernetes.io/serviceaccount/token
          ca_file /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        </filter>

        # Limit log size
        <filter raw.kubernetes.**>
          @type record_transformer
          enable_ruby true
          <record>
            log ${record["log"].to_s.length > 32768 ? record["log"].to_s[0..32767] + "... (truncated)" : record["log"]}
          </record>
        </filter>

        # Route by namespace and node
        <match raw.kubernetes.**>
          @type rewrite_tag_filter
          <rule>
            key $.kubernetes.namespace_name
            pattern ^(linkding)$
            tag k8s.linkding
          </rule>
          <rule>
            key $.kubernetes.namespace_name
            pattern ^(audiobookshelf)$
            tag k8s.audiobookshelf
          </rule>
          <rule>
            key $.kubernetes.host
            pattern ^(master|control-plane)$
            tag k8s.master
          </rule>
          <rule>
            key $.kubernetes.host
            pattern ^(p2)$
            tag k8s.worker
          </rule>
          <rule>
            key $.kubernetes.namespace_name
            pattern ^(.+)$
            tag k8s.namespace.$1
          </rule>
        </match>

        # Output to Elasticsearch
        <match k8s.**>
          @type elasticsearch
          host "#{ENV['FLUENT_ELASTICSEARCH_HOST']}"
          port "#{ENV['FLUENT_ELASTICSEARCH_PORT']}"
          scheme "#{ENV['FLUENT_ELASTICSEARCH_SCHEME']}"
          user "#{ENV['FLUENT_ELASTICSEARCH_USER']}"
          password "#{ENV['FLUENT_ELASTICSEARCH_PASSWORD']}"
          index_name ${tag}
          reconnect_on_error true
          reload_connections true
          request_timeout 30s
          
          <buffer tag>
            @type file
            path /var/log/fluentd-buffers/kubernetes.buffer
            flush_mode interval
            flush_interval 5s
            flush_thread_count 2
            retry_type exponential_backoff
            retry_forever false
            retry_max_interval 30
            chunk_limit_size 8M
            queue_limit_length 32
          </buffer>
        </match>

    env:
      - name: FLUENT_ELASTICSEARCH_HOST
        value: "elasticsearch-master"
      - name: FLUENT_ELASTICSEARCH_PORT
        value: "9200"
      - name: FLUENT_ELASTICSEARCH_SCHEME
        value: "http"
      - name: FLUENT_ELASTICSEARCH_USER
        valueFrom:
          secretKeyRef:
            name: elasticsearch-credentials
            key: username
      - name: FLUENT_ELASTICSEARCH_PASSWORD
        valueFrom:
          secretKeyRef:
            name: elasticsearch-credentials
            key: password
