apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: kube-prometheus-stack
  namespace: monitoring
spec:
  interval: 30m
  chart:
    spec:
      chart: kube-prometheus-stack
      version: "66.2.2"
      sourceRef:
        kind: HelmRepository
        name: kube-prometheus-stack
        namespace: monitoring
      interval: 12h
  install:
    crds: Create
  upgrade:
    crds: CreateReplace
  driftDetection:
    mode: enabled
    ignore:
      - paths: ["/metadata/annotations/prometheus-operator-validated"]
        target:
          kind: PrometheusRule
  values:
    # Alle Komponenten dieses Charts (Prometheus, Grafana, Alertmanager etc.) werden auf p3 geplant
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
            - matchExpressions:
                - key: kubernetes.io/hostname
                  operator: In
                  values:
                    - p3

    grafana:
      adminPassword: timour

      # ✅ Tempo und Loki-Integration
      additionalDataSources:
        - name: Tempo
          type: tempo
          uid: tempo
          access: proxy
          url: http://tempo-query-frontend.tempo.svc.cluster.local:3100
          jsonData:
            httpMethod: GET
            serviceMap:
              datasourceUid: prometheus
            search:
              hide: false
            nodeGraph:
              enabled: true
            lokiSearch:
              datasourceUid: loki
        - name: Loki
          type: loki
          uid: loki
          access: proxy
          url: http://loki-read-headless.loki.svc.cluster.local:3100
          jsonData:
            # ✅ Trace-zu-Log-Korrelation
            derivedFields:
              - datasourceUid: tempo
                matcherRegex: '"trace_id":"([^"]*)"'
                name: TraceID
                url: '$${__value.raw}'
              - datasourceUid: tempo
                matcherRegex: '"traceID":"([^"]*)"'
                name: TraceID
                url: '$${__value.raw}'
              - datasourceUid: tempo
                matcherRegex: 'trace_id=([0-9a-f]+)'
                name: TraceID
                url: '$${__value.raw}'
        - name: Prometheus
          type: prometheus
          uid: prometheus
          access: proxy
          url: http://prometheus-operated.monitoring.svc.cluster.local:9090
          isDefault: true

      # ✅ Grafana-Dashboards für Tracing
      dashboardProviders:
        dashboardproviders.yaml:
          apiVersion: 1
          providers:
          - name: 'default'
            orgId: 1
            folder: ''
            type: file
            disableDeletion: false
            editable: true
            options:
              path: /var/lib/grafana/dashboards/default
          - name: 'tempo'
            orgId: 1
            folder: 'Tempo'
            type: file
            disableDeletion: false
            editable: true
            options:
              path: /var/lib/grafana/dashboards/tempo

      dashboards:
        default:
          # ✅ Emojivoto-Dashboard
          emojivoto:
            gnetId: 11462
            revision: 1
            datasource: Prometheus
        tempo:
          # ✅ Tempo-Dashboards
          tempo-operational:
            gnetId: 14489
            revision: 1
            datasource: Prometheus
          tempo-red-metrics:
            gnetId: 14490
            revision: 1
            datasource: Prometheus

      ingress:
        enabled: true
        ingressClassName: traefik
        annotations:
          cert-manager.io/cluster-issuer: "letsencrypt-prod"
        labels: {}
        hosts:
          - grafana.timourhomelab.org
        tls:
          - secretName: grafana-tls-secret
            hosts:
              - grafana.timourhomelab.org

    # ✅ Prometheus-Konfiguration für Tracing-Metriken
    prometheus:
      prometheusSpec:
        # ✅ Scrape Emojivoto-Metriken
        additionalScrapeConfigs:
          - job_name: 'emojivoto-emoji'
            kubernetes_sd_configs:
              - role: pod
                namespaces:
                  names:
                    - emojivoto
            relabel_configs:
              - source_labels: [__meta_kubernetes_pod_label_app]
                action: keep
                regex: emoji-svc
              - source_labels: [__meta_kubernetes_pod_container_port_name]
                action: keep
                regex: prom
          - job_name: 'emojivoto-voting'
            kubernetes_sd_configs:
              - role: pod
                namespaces:
                  names:
                    - emojivoto
            relabel_configs:
              - source_labels: [__meta_kubernetes_pod_label_app]
                action: keep
                regex: voting-svc
              - source_labels: [__meta_kubernetes_pod_container_port_name]
                action: keep
                regex: prom
          - job_name: 'tempo'
            kubernetes_sd_configs:
              - role: pod
                namespaces:
                  names:
                    - tempo
            relabel_configs:
              - source_labels: [__meta_kubernetes_pod_label_app_kubernetes_io_name]
                action: keep
                regex: tempo
              - source_labels: [__meta_kubernetes_pod_container_port_name]
                action: keep
                regex: http

    # ✅ Alertmanager-Konfiguration
    alertmanager:
      alertmanagerSpec:
        nodeSelector:
          kubernetes.io/hostname: p3