apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: vector
  namespace: fluent-bit  # Gleicher Namespace für einfache Migration
spec:
  interval: 5m
  chart:
    spec:
      chart: vector
      version: "0.35.0"
      sourceRef:
        kind: HelmRepository
        name: vector
        namespace: fluent-bit
  values:
    # Vector als DaemonSet für Log Collection
    role: "Agent"
    
    # ✅ ARM64-kompatibles Image (kein jemalloc Problem)
    image:
      repository: timberio/vector
      tag: "0.37.1-alpine"
      pullPolicy: IfNotPresent
    
    # ✅ ARM64 Node Targeting
    nodeSelector:
      kubernetes.io/arch: arm64
    
    # Environment variables
    env:
      - name: VECTOR_LOG_LEVEL
        value: "info"
      - name: FLUENT_AGGREGATOR_HOST
        value: "fluentd.fluent.svc.cluster.local"
      - name: FLUENT_AGGREGATOR_PORT
        value: "24224"
      - name: FLUENT_AGGREGATOR_SHARED_KEY
        valueFrom:
          secretKeyRef:
            name: fluent-bit-env-secret
            key: FLUENT_AGGREGATOR_SHARED_KEY
      - name: NODE_NAME
        valueFrom:
          fieldRef:
            fieldPath: spec.nodeName
    
    # Vector Konfiguration - kompatibel mit Fluent Bit Setup
    customConfig:
      data_dir: "/var/lib/vector"
      api:
        enabled: true
        address: "0.0.0.0:8686"
        playground: false
      
      sources:
        kubernetes_logs:
          type: "kubernetes_logs"
          exclude_paths_glob_patterns:
            - "/var/log/containers/vector-*"
            - "/var/log/containers/fluent-*"
          extra_field_selector: ""
          extra_label_selector: ""
          max_read_bytes: 2048
          max_line_bytes: 32768
          glob_minimum_cooldown_ms: 1000
          fingerprint_lines: 1
          ignore_older_secs: 600
      
      transforms:
        kubernetes_filter:
          type: "filter"
          inputs: ["kubernetes_logs"]
          condition: |
            exists(.kubernetes.pod_labels) && 
            !starts_with(.kubernetes.pod_name, "vector") &&
            !starts_with(.kubernetes.pod_name, "fluent")
        
        kubernetes_remap:
          type: "remap"
          inputs: ["kubernetes_filter"]
          source: |
            .tag = "kube." + .kubernetes.pod_namespace + "." + .kubernetes.pod_name + "." + .kubernetes.container_name
            .host = get_env_var!("NODE_NAME")
            
            # Fluentd kompatible Felder
            .container_name = .kubernetes.container_name
            .namespace_name = .kubernetes.pod_namespace
            .pod_name = .kubernetes.pod_name
            .pod_id = .kubernetes.pod_uid
            .labels = .kubernetes.pod_labels
            .annotations = .kubernetes.pod_annotations
      
      sinks:
        fluentd_forward:
          type: "socket"
          mode: "tcp"
          inputs: ["kubernetes_remap"]
          address: "{{ .Values.env[1].value }}:{{ .Values.env[2].value }}"
          encoding:
            codec: "json"
          framing:
            method: "newline_delimited"
          healthcheck:
            enabled: true
    
    # Host directories - gleich wie Fluent Bit
    extraVolumes:
      - name: varlog
        hostPath:
          path: /var/log
      - name: varlibdockercontainers
        hostPath:
          path: /var/lib/docker/containers
      - name: etcmachineid
        hostPath:
          path: /etc/machine-id
          type: File
    
    extraVolumeMounts:
      - name: varlog
        mountPath: /var/log
        readOnly: true
      - name: varlibdockercontainers
        mountPath: /var/lib/docker/containers
        readOnly: true
      - name: etcmachineid
        mountPath: /etc/machine-id
        readOnly: true
    
    # Tolerations - gleich wie Fluent Bit
    tolerations:
      - key: node-role.kubernetes.io/control-plane
        operator: Exists
        effect: NoSchedule
    
    # ✅ ARM64-optimierte Ressourcen
    resources:
      limits:
        memory: 256Mi
        cpu: 200m
      requests:
        memory: 128Mi  # Vector ist effizienter als Fluent Bit
        cpu: 100m
    
    # Health checks
    livenessProbe:
      httpGet:
        path: /health
        port: 8686
      initialDelaySeconds: 30
      periodSeconds: 15
      failureThreshold: 3
    
    readinessProbe:
      httpGet:
        path: /health
        port: 8686
      initialDelaySeconds: 10
      periodSeconds: 10
      failureThreshold: 3
    
    # Service für Monitoring
    service:
      enabled: true
      type: ClusterIP
      ports:
        - name: api
          port: 8686
          targetPort: 8686
          protocol: TCP
    
    # ServiceMonitor für Prometheus
    serviceMonitor:
      enabled: true
      path: /metrics
      port: api