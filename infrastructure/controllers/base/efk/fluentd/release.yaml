apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: logstash
  namespace: logging
spec:
  interval: 15m
  chart:
    spec:
      chart: logstash
      version: "7.17.3"
      sourceRef:
        kind: HelmRepository
        name: elastic
        namespace: logging
  values:
    image: "docker.elastic.co/logstash/logstash"
    imageTag: "7.17.3"

    logstashConfig:
      logstash.yml: |
        http.host: "0.0.0.0"
        path.data: /usr/share/logstash/data
        path.logs: /usr/share/logstash/logs
        log.level: info

    logstashPipeline:
      logstash.conf: |
        input {
          file {
            path => "/var/log/containers/*.log"
            exclude => ["/var/log/containers/*fluentd*", "/var/log/containers/*logstash*", "/var/log/containers/*elastic*", "/var/log/containers/*kibana*"]
            sincedb_path => "/usr/share/logstash/data/sincedb"
            start_position => "beginning"
            codec => "json_lines"
            tags => ["kubernetes"]
          }
        }

        filter {
          # Parse Kubernetes metadata from file path
          grok {
            match => { "path" => "/var/log/containers/%{DATA:pod_name}_%{DATA:namespace}_%{GREEDYDATA:container_name}\.log" }
          }
          
          if [log] {
            # Skip logs with excessive backslashes
            if [log] =~ /\\{5,}/ {
              drop {}
            }
            
            mutate {
              rename => { "log" => "message" }
              add_field => {
                "kubernetes_namespace" => "%{namespace}"
                "kubernetes_pod" => "%{pod_name}"
                "kubernetes_container" => "%{container_name}"
              }
            }
          }
        }

        output {
          elasticsearch {
            hosts => ["elasticsearch-master:9200"]
            user => "${ELASTICSEARCH_USER}"
            password => "${ELASTICSEARCH_PASSWORD}"
            index => "%{[kubernetes_namespace]}-%{+YYYY.MM.dd}"
            template_overwrite => true
          }
        }

    extraVolumes:
      - name: varlog
        hostPath:
          path: /var/log
      - name: containers
        hostPath:
          path: /var/lib/docker/containers

    extraVolumeMounts:
      - name: varlog
        mountPath: /var/log
        readOnly: true # Added readOnly to avoid permission issues
      - name: containers
        mountPath: /var/lib/docker/containers
        readOnly: true

    # Remove runAsUser: 0 and use fsGroup instead
    podSecurityContext:
      fsGroup: 1000

    securityContext:
      # Remove runAsUser: 0
      privileged: false # Changed to false for security

    resources:
      requests:
        cpu: 100m
        memory: 256Mi
      limits:
        cpu: 500m
        memory: 512Mi

    extraEnv:
      - name: ELASTICSEARCH_USER
        valueFrom:
          secretKeyRef:
            name: elasticsearch-credentials
            key: username
      - name: ELASTICSEARCH_PASSWORD
        valueFrom:
          secretKeyRef:
            name: elasticsearch-credentials
            key: password
      - name: LS_JAVA_OPTS
        value: "-Xmx256m -Xms256m"

    # Add initContainer to fix permissions using officially approved pattern
    extraInitContainers:
      - name: logstash-init
        image: busybox
        command:
          [
            "sh",
            "-c",
            "mkdir -p /usr/share/logstash/data/sincedb && chmod -R 777 /usr/share/logstash/data",
          ]
        volumeMounts:
          - name: logstash-data
            mountPath: /usr/share/logstash/data
