apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: keycloak
  namespace: keycloak
spec:
  interval: 5m
  chart:
    spec:
      chart: keycloakx  # ← GEÄNDERT von 'keycloak' zu 'keycloakx'
      version: ">=7.0.0"  # ← Update Version Range
      sourceRef:
        kind: HelmRepository
        name: codecentric  # ← Behalten wir codecentric
        namespace: keycloak
      interval: 5m
  values:
    # ========================================
    # KEYCLOAK IMAGE & BASIC CONFIG
    # ========================================
    
    # Keycloak Image (KeycloakX verwendet neueres Image)
    image:
      repository: quay.io/keycloak/keycloak
      tag: "26.0.7"  # Matches chart app version

    # ========================================
    # DATABASE CONFIGURATION  
    # ========================================
    
    # H2 Embedded Database (einfacher Start)
    database:
      vendor: h2-file  # KeycloakX syntax für H2
      hostname: ""
      port: ""
      database: ""
      username: ""
      password: ""

    # ========================================
    # ADMIN CONFIGURATION
    # ========================================
    
    # Admin User
    auth:
      adminUser: admin
      # adminPassword wird automatisch generiert

    # ========================================
    # STORAGE & PERSISTENCE
    # ========================================
    
    # Persistence für H2 Database
    persistence:
      deployPostgres: false  # Disable PostgreSQL
      
    # Extra Volumes für H2 File Storage
    extraVolumes: |
      - name: keycloak-data
        persistentVolumeClaim:
          claimName: keycloak-data-pvc

    extraVolumeMounts: |
      - name: keycloak-data
        mountPath: /opt/keycloak/data
        subPath: keycloak

    # PVC für H2 Database Files
    extraObjects:
      - apiVersion: v1
        kind: PersistentVolumeClaim
        metadata:
          name: keycloak-data-pvc
          namespace: keycloak
        spec:
          accessModes:
            - ReadWriteOnce
          storageClassName: longhorn
          resources:
            requests:
              storage: 2Gi

    # ========================================
    # CLOUDNATIVE-PG INTEGRATION (OPTIONAL - auskommentiert)
    # ========================================
    # Um CloudNativePG zu verwenden, uncomment diese Sektion:
    #
    # database:
    #   vendor: postgres
    #   hostname: "keycloak-db-staging-rw"  # CloudNativePG read-write service
    #   port: 5432
    #   database: "keycloak"
    #   existingSecret: "keycloak-db-staging-app"  # CloudNativePG auto-generated secret
    #   existingSecretUserKey: "username"
    #   existingSecretPasswordKey: "password"
    #
    # # Remove H2 configuration
    # persistence:
    #   deployPostgres: false
    #
    # extraVolumes: ""
    # extraVolumeMounts: ""
    # extraObjects: []

    # ========================================
    # RESOURCES & PERFORMANCE
    # ========================================
    
    # Resource Limits für Raspberry Pi
    resources:
      limits:
        memory: 1Gi
        cpu: 500m
      requests:
        memory: 512Mi
        cpu: 250m

    # ========================================
    # NETWORKING & SERVICE
    # ========================================
    
    # Service Configuration
    service:
      type: ClusterIP
      port: 8080

    # Ingress (wird in staging überschrieben)
    ingress:
      enabled: false

    # ========================================
    # SECURITY
    # ========================================
    
    # Service Account
    serviceAccount:
      create: true

    # Security Context
    podSecurityContext:
      fsGroup: 1000

    securityContext:
      runAsUser: 1000
      runAsNonRoot: true