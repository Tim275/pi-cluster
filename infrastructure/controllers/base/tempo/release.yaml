apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: tempo
  namespace: tempo
spec:
  interval: 5m
  chart:
    spec:
      chart: tempo  # ✅ WICHTIG: Monolithic Chart (nicht tempo-distributed)
      version: 1.18.0
      sourceRef:
        kind: HelmRepository
        name: grafana
        namespace: tempo
  values:
    # ✅ Simpelste Konfiguration
    tempo:
      repository: grafana/tempo
      tag: 2.6.1
      
    # ✅ Minio Backend (simpel)
    config: |
      server:
        http_listen_port: 3100
        grpc_listen_port: 9095
        log_level: info
      
      distributor:
        receivers:
          otlp:
            protocols:
              grpc:
                endpoint: 0.0.0.0:4317
              http:
                endpoint: 0.0.0.0:4318
          zipkin:
            endpoint: 0.0.0.0:9411
          jaeger:
            protocols:
              thrift_compact:
                endpoint: 0.0.0.0:6831
              thrift_http:
                endpoint: 0.0.0.0:14268
        log_received_spans:
          enabled: true
      
      ingester:
        lifecycler:
          address: 127.0.0.1
          ring:
            kvstore:
              store: inmemory
            replication_factor: 1
      
      storage:
        trace:
          backend: s3
          s3:
            bucket: k3s-tempo
            endpoint: minio.minio.svc.cluster.local:9000
            region: eu-west-1
            access_key_id: ${MINIO_ACCESS_KEY_ID}
            secret_access_key: ${MINIO_SECRET_ACCESS_KEY}
            insecure: true
            forcepathstyle: true
      
      compactor:
        compaction:
          block_retention: 168h
    
    # ✅ Environment Variables für Minio
    extraEnv:
      - name: MINIO_ACCESS_KEY_ID
        valueFrom:
          secretKeyRef:
            name: tempo-minio-secret
            key: MINIO_ACCESS_KEY_ID
      - name: MINIO_SECRET_ACCESS_KEY
        valueFrom:
          secretKeyRef:
            name: tempo-minio-secret
            key: MINIO_SECRET_ACCESS_KEY
    
    # ✅ Simpel: Nur 1 Replica
    replicas: 1
    
    # ✅ Pi-optimierte Ressourcen
    resources:
      limits:
        memory: 1Gi
        cpu: 500m
      requests:
        memory: 512Mi
        cpu: 250m
    
    # ✅ ARM64 Support
    nodeSelector:
      kubernetes.io/arch: arm64
    
    # ✅ Service für Traces
    service:
      type: ClusterIP
      port: 3100
      
    # ✅ Persistence für lokale Daten
    persistence:
      enabled: true
      size: 10Gi
      storageClass: longhorn
    
    # ✅ Service Monitor
    serviceMonitor:
      enabled: true
      labels:
        release: prometheus